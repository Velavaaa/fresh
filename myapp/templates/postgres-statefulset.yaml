apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "myapp.fullname" . }}-postgres
  labels:
    {{- include "myapp.labels" . | nindent 4 }}
spec:
  serviceName: "{{ include "myapp.fullname" . }}-postgres-headless"
  replicas: {{ .Values.postgres.replicaCount }}
  selector:
    matchLabels:
      {{- include "myapp.selectorLabels" . | nindent 6 }}
      app: postgres
  template:
    metadata:
      labels:
        {{- include "myapp.selectorLabels" . | nindent 8 }}
        app: postgres
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}"
          imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.postgres.service.port }}
          env:
            - name: POSTGRES_USER
              value: {{ .Values.postgres.env.POSTGRES_USER | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
               secretKeyRef:
                name: myapp-database-secret
                key: POSTGRES_PASSWORD
            -  name: POSTGRES_DB
               value: {{ .Values.postgres.env.POSTGRES_DB | quote }}
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
        labels:
          customLabel: "postgres-storage"  # Optional custom label, replace or remove if not needed
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
